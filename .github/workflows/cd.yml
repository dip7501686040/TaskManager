# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CD

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Node.js CI"]
    types:
      - completed
    
jobs:
  build:
    runs-on: self-hosted
    steps:
    - name: Docker compose down
      run: |
        sudo docker compose down
        sudo docker image prune -a
    # Make cmdrc file
    - name: Make env-cmdrc file
      run: |
          echo '{ "production": { "ENV": "production", "MONGO_URI": "${{ secrets.MONGO_URI_PROD }}", "API_URL": "${{ secrets.API_URL_PROD }}", "AWS_ACCESS_KEY_ID": "${{ secrets.AWS_ACCESS_KEY_ID_PROD }}", "AWS_SECRET_ACCESS_KEY": "${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}", "AWS_REGION": "${{ secrets.AWS_REGION_PROD }}", "AWS_BUCKET_NAME": "${{ secrets.AWS_BUCKET_NAME_PROD }}" } }' > ./server/.env-cmdrc
    # Checkout the code from the GitHub repository
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: production
        sparse-checkout: |
          react_client/build
          react_client/DockerFile --skip-checks
          react_client/.dockerignore --skip-checks
          server/DockerFile --skip-checks
          server/.dockerignore --skip-checks
          server/dist
          server/package.json --skip-checks
          server/.env-cmdrc --skip-checks
          docker-compose.yml --skip-checks
    - name: Docker compose up
      run: |
        sudo docker compose up -d